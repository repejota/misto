// Code generated by go-bindata.
// sources:
// assets/index.html
// DO NOT EDIT!

package misto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x6d\x53\xdb\x38\x10\xfe\xde\x5f\xa1\xaa\x9d\x29\x1d\x2a\x2b\x21\x24\xbc\x34\x66\x26\xa5\xc0\x35\x1c\x94\x90\x52\x68\xbf\x29\xd6\xda\x56\x22\x4b\x46\x92\x4d\xd2\x9b\xfe\xf7\x1b\xd9\xce\x0b\x0c\xcc\x75\xe6\xbe\xc4\xda\xd5\x6a\xf5\x3c\xab\x7d\x49\xff\x35\xd7\x91\x5b\xe4\x80\x52\x97\xc9\xa3\x57\x7d\xff\x41\x92\xa9\x24\xc4\xa0\xf0\xd1\x2b\x84\xfa\x29\x30\xee\x17\x08\xf5\x5f\x13\x82\xae\xe1\xbe\x10\x06\x38\xca\xc0\x31\xe4\x58\x62\x11\x21\xcd\x7e\xa5\x8a\x52\x66\x2c\xb8\x10\x17\x2e\x26\xfb\x78\x73\x4b\xb1\x0c\x42\x5c\x0a\x78\xc8\xb5\x71\x18\x45\x5a\x39\x50\x2e\xc4\x0f\x82\xbb\x34\xe4\x50\x8a\x08\x48\x25\x7c\x40\x42\x09\x27\x98\x24\x36\x62\x12\xc2\xf6\x07\x64\x53\x23\xd4\x8c\x38\x4d\x62\xe1\x42\xa5\xf1\x06\xaa\x4f\x5a\x3b\xeb\x0c\xcb\xd1\xf1\x78\xbc\x06\x24\x85\x9a\x21\x03\x32\xc4\xd6\x2d\x24\xd8\x14\xc0\x61\x94\x1a\x88\x43\x9c\x3a\x97\xdb\x43\x4a\x33\x36\x8f\xb8\x0a\x26\x4b\x0f\x5e\x88\x74\x46\x57\x0a\xba\x1b\xb4\x82\x16\x8d\xac\x5d\xeb\x82\x4c\xa8\x20\xb2\x16\x23\xa1\x1c\x24\x46\xb8\x45\x88\x6d\xca\x3a\xfb\xbb\xe4\x4c\x75\x3b\xfb\xbb\xf3\xfb\x51\x9b\xe9\xdb\xbb\xc1\x76\xab\xbb\x7f\x7d\x77\x35\xbf\x4a\x7a\xf1\x62\xf7\xcb\x6d\xf9\xed\x32\x6d\x9d\xec\xf4\x3a\x77\xd9\x69\x34\x94\xe3\xc1\x83\x38\x4b\x4e\x07\xb7\x94\x0f\xc4\xb8\x37\xbc\xcb\x30\x8a\x8c\xb6\x56\x1b\x91\x08\x15\x62\xa6\xb4\x5a\x64\xba\xb0\x4b\xbe\x15\x15\xe4\x5f\x2d\xc4\x0e\xe6\xce\x23\x6b\xf6\x26\x9a\x2f\xd0\x3f\xd5\x12\xa1\x58\x2b\x47\xac\xf8\x05\x87\xa8\x15\xec\x43\xf6\xb1\xd2\xff\xae\x7e\x03\xc5\xca\x09\x33\x2b\xdb\x9c\x71\x2e\x54\x72\x88\xba\xf9\xfc\x91\x5d\xa4\x95\xd5\x12\xfe\xc8\x69\x21\x03\xa9\x13\x8b\xa4\xf8\x4f\xbf\x6b\xd3\x43\xe5\x52\xa2\x63\xe2\xf9\x6c\x69\xce\xdf\xaf\xce\x22\x34\x61\xd1\x2c\x31\xba\x50\x9c\x44\x5a\x6a\x73\x88\xde\x00\xc0\xa6\x9f\x3e\xad\xa2\xd1\x44\xc6\x09\x27\xe1\xe8\x42\x58\xa7\xfb\xb4\x16\x7c\x06\xd3\x65\x0a\xf7\x7d\x7c\x1a\x5b\xc5\x4a\x14\x49\x66\x6d\x88\x9b\x58\xc4\x62\x0e\x9c\x38\x9d\xa3\x5a\x41\x60\x9e\x33\xc5\x89\x4c\x96\x0a\xce\xcc\x0c\x4d\x92\xfa\xeb\x43\x4f\xa4\x48\x52\xd7\x04\xdf\xfb\x2f\x9c\xd3\xea\xb1\x5f\xe2\x74\x92\x48\x30\xb8\x79\xb2\xda\x06\x23\xce\x1c\x6b\xf6\x42\x1c\x69\x29\x59\x6e\x61\xa9\x66\x26\xf1\x25\xf4\xa6\x76\x31\x2e\x72\x5f\x30\xc0\x8f\xeb\x82\xc1\x88\x19\xc1\x88\x2f\x1f\xa3\xe5\xea\xa6\x17\xcc\x6a\x1a\xc0\x43\x1c\x33\xe9\xaf\xa8\xb4\x92\x4d\x7c\x5d\x7c\xab\x00\x78\x82\x22\x61\x4e\x68\xb5\x22\xe3\x33\x2d\x67\x2f\x90\x21\x22\xf2\xa6\x7d\xea\x4d\x56\xf4\x69\xcd\x6d\x25\x73\xb1\x8a\xf1\x92\xe0\x32\x94\x6b\xc2\x82\xbf\x88\x7f\x03\x4a\x21\x9f\x00\xf1\xef\x97\x19\xc2\x0a\xa7\x37\xec\xaa\x9a\xdf\xb0\x24\xc2\x41\x86\x58\xe4\x44\x09\x8f\xcc\x10\xea\xaf\xec\x62\x66\x51\xcc\x48\x2c\x0c\x78\x4a\xe2\x08\x55\x29\xb4\xe9\x94\x4a\xb1\x01\x86\x16\x72\xcd\x99\x8b\xb2\x49\x29\xaa\xd8\x72\x69\x21\xf2\xc1\x6c\x3a\x5e\x53\x44\x78\x1d\x0c\xe5\x98\x50\x60\x48\x2c\x0b\xc1\xd1\xb2\xc8\x72\xd2\x7a\x9e\x73\x53\x2b\xd6\x91\x42\x55\x09\xcf\xf1\x73\x70\xfa\xb4\xb9\x77\x89\x22\x32\x22\x77\x88\x43\x0c\x06\x59\x13\xad\x9b\x5e\x61\x21\xf0\xa5\xcc\x1e\xc0\xea\x0c\xaa\x86\x67\x40\x02\xb3\x60\x69\xd9\x0d\x5a\x41\x8f\x4e\x2d\x65\x52\x06\x53\x5b\xbd\x73\xe5\x6a\xa3\xe3\x4e\x47\x05\x98\x05\x8a\x85\xb1\xee\x03\x72\x29\x28\x74\xa5\xf3\x1c\x4c\x30\xb5\x8d\xbc\x6e\xca\xc3\x8d\x9e\xdc\x80\x7a\x04\x27\xd2\x1c\x82\xe9\xbd\xf7\x58\x41\xa9\x97\xa4\x13\xec\x04\xed\xc0\x4a\x91\x55\xfd\x76\xfa\x6c\xbb\x3d\x1f\x76\xf4\xce\xe7\x73\xf7\x65\x56\xfe\xf8\x72\xde\xb9\x39\xb9\xfc\x95\x5d\xec\x9d\x1f\xcf\xae\x0d\x35\x27\x07\x74\x94\x27\x3d\x36\xf8\x79\x36\x7c\x38\xfd\x7c\xf1\xfd\x72\x40\xcf\xf2\xb3\xd3\xd3\x83\x4e\x7a\x97\x9f\x75\xcf\x67\x97\x2f\xb7\xdb\x27\xac\x9f\x05\xce\xd5\xd4\x06\x91\xd4\x05\x8f\x25\x33\x75\x20\xd9\x94\xcd\xa9\x14\x13\x4b\xf3\x65\x44\x68\x3b\x68\xef\x04\x07\xb4\xc8\xf8\x52\xf9\x32\xa3\x41\x7e\x39\x49\xd2\x83\x4f\xdb\x3f\xda\xa3\x73\x57\x76\xae\xd5\xde\x6d\x27\x4b\xae\xe6\xe9\xcd\xc1\x39\x1d\x47\x23\x3b\xb8\xda\x4b\x6f\xc4\xe4\xae\x73\x30\xdd\x8b\xd9\xec\xf4\xca\xce\xca\xbb\xc2\x96\x31\x6b\x4d\x76\x47\xff\x8b\xd1\x9f\x8e\xc3\xe9\xd3\x69\xf8\x3c\x97\xe1\xcf\xeb\xde\x38\x87\x69\xba\x7b\xd3\xda\xe1\xfb\xd3\xaf\xae\x57\xfe\x7d\xf2\x57\x0c\x74\x38\x3a\x13\xd7\xd7\xe3\xd1\x68\x3e\x8e\x4f\x6f\x73\xd1\xbe\xb8\x2f\xbe\xf3\xc1\x62\x7a\xc3\x4c\x77\x7b\xaf\x77\xf5\xfd\x38\xfb\x21\xff\x98\x8b\xcf\xc9\xaf\xb9\x4f\x7e\x26\xd1\x90\x95\x6c\x5c\x93\x7b\x92\x77\xb5\xf0\x76\x2b\x2e\x54\x55\x29\x5b\xeb\x79\x63\x75\x34\x03\x87\x42\xa4\xe0\x01\xdd\xc2\x64\x5c\xc9\x5b\xf8\xc1\x87\x45\xea\x88\xc9\x54\x5b\x77\xd8\xed\x76\xdb\xd4\x17\x24\x7e\xff\xf1\xd1\xc9\x40\xab\x0c\xac\x65\x09\xa0\x10\x2d\xfd\xa3\x2d\x28\x41\xb9\xcd\xa9\xf6\x76\xeb\x5d\x35\xfc\xde\xbd\x0f\x72\x03\x39\x28\xbe\x85\xfb\x52\x1c\xe1\xed\xca\x34\xf0\x13\x60\x1b\x57\x2d\x67\x7d\x45\x3d\xee\x7e\x37\xf2\x26\xf7\x3e\xad\xa7\x5a\x9f\x56\xff\xe1\xfe\x0d\x00\x00\xff\xff\x66\xa3\x9b\x97\xd3\x09\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 2515, mode: os.FileMode(420), modTime: time.Unix(1517603916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

