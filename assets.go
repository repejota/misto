// Code generated by go-bindata.
// sources:
// assets/index.html
// DO NOT EDIT!

package misto

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x5d\x53\xdb\x3a\x13\xbe\xef\xaf\x50\xd5\xce\x34\x0c\xb5\x95\x10\xc2\x57\x6d\x66\x52\x0a\xb4\xe1\x85\x12\x52\x0a\xed\x9d\x22\xad\x6d\x25\xb2\x64\x24\xd9\x24\x7d\xa7\xff\xfd\x8c\xec\x7c\xd1\x81\x33\x9d\x39\x37\xb1\x77\xb5\x96\x9e\x67\xb5\xfb\x6c\xa2\xd7\x5c\x33\x37\x2f\x00\x65\x2e\x97\xc7\xaf\x22\xff\x40\x92\xaa\x34\xc6\xa0\xf0\xf1\x2b\x84\xa2\x0c\x28\xf7\x2f\x08\x45\xaf\x83\x00\xdd\xc0\x43\x29\x0c\x70\x94\x83\xa3\xc8\xd1\xd4\xa2\x20\x58\xac\xd7\x2e\x96\x51\x63\xc1\xc5\xb8\x74\x49\x70\x80\x37\x97\x14\xcd\x21\xc6\x95\x80\xc7\x42\x1b\x87\x11\xd3\xca\x81\x72\x31\x7e\x14\xdc\x65\x31\x87\x4a\x30\x08\x6a\xe3\x3d\x12\x4a\x38\x41\x65\x60\x19\x95\x10\x77\xde\x23\x9b\x19\xa1\xa6\x81\xd3\x41\x22\x5c\xac\x34\xde\x40\xf5\x51\x6b\x67\x9d\xa1\x05\x3a\x19\x8d\xd6\x80\xa4\x50\x53\x64\x40\xc6\xd8\xba\xb9\x04\x9b\x01\x38\x8c\x32\x03\x49\x8c\x33\xe7\x0a\x7b\x44\x48\x4e\x67\x8c\xab\x70\xbc\xdc\xc1\x1b\x4c\xe7\x64\xe5\x20\xbb\x61\x3b\x6c\x13\x66\xed\xda\x17\xe6\x42\x85\xcc\x5a\x8c\x84\x72\x90\x1a\xe1\xe6\x31\xb6\x19\xed\x1e\xec\x06\xe7\xaa\xd7\x3d\xd8\x9d\x3d\x0c\x3b\x54\xdf\xdd\xf7\xb7\xdb\xbd\x83\x9b\xfb\xeb\xd9\x75\xba\x97\xcc\x77\xbf\xdc\x55\xdf\xae\xb2\xf6\xe9\xce\x5e\xf7\x3e\x3f\x63\x03\x39\xea\x3f\x8a\xf3\xf4\xac\x7f\x47\x78\x5f\x8c\xf6\x06\xf7\x39\x46\xcc\x68\x6b\xb5\x11\xa9\x50\x31\xa6\x4a\xab\x79\xae\x4b\xbb\xe4\x5b\x53\x41\xfe\xd6\x62\xec\x60\xe6\x3c\xb2\xc5\xda\x58\xf3\x39\xfa\x7f\xfd\x8a\x50\xa2\x95\x0b\xac\xf8\x05\x47\xa8\x1d\x1e\x40\xfe\xa1\xf6\xff\xae\x7f\x43\x7f\xab\x60\x90\xa2\xd5\x2a\x7e\x4c\xd9\x34\x35\xba\x54\x3c\x60\x5a\x6a\x73\x84\xde\xec\xb0\x2e\xf4\xda\x4f\x3e\x64\x5a\x59\x2d\xe1\xaf\x4e\x29\x65\x28\x75\x6a\x91\x14\xab\xf0\x82\x72\x2e\x54\x7a\x84\x76\x8a\x19\xea\x15\xb3\xe7\xc3\x8f\x94\xcb\x02\x9d\x04\x9e\x64\x4b\x73\xbe\xb5\xfa\xfe\x59\x98\x00\xb0\xb9\x4f\x44\xea\x14\x2d\xd2\xe5\x84\x93\x70\x7c\x29\xac\xd3\x11\x69\x0c\x5f\xd6\x64\x59\xd7\x91\x4f\xda\xf1\xab\x26\xd8\xe7\x83\x49\x6a\x6d\x8c\x15\xad\xc6\xd4\xa0\x44\xcc\x80\x07\x4e\x17\xa8\x71\x04\x30\x2b\xa8\xe2\x81\x4c\x97\x0e\x4e\xcd\x14\x8d\xd3\xe6\x59\x04\xed\xc5\x5d\xf8\x9d\x4b\xe7\xb4\x7a\xba\x61\xe0\x74\x9a\x4a\x30\x78\x71\x83\x4d\x0c\x46\x9c\x3a\xba\x58\x8b\x31\xd3\x52\xd2\xc2\xc2\xd2\x4d\x4d\xea\x3b\xea\x4d\xb3\xc5\xa8\x2c\x7c\xff\x00\x3f\x69\xfa\x07\x23\x6a\x04\x0d\x7c\x37\x19\x2d\x57\x27\xbd\x10\xd6\xe0\x07\x1e\xe3\x84\x4a\x7f\x44\xed\x95\x74\xec\xdb\xe4\x5b\x0d\xc0\x33\x13\x29\x75\x42\xab\x15\x19\x5f\x78\x05\x7d\x81\x4c\x20\x98\x0f\x8d\x88\x0f\x59\xd1\x27\x0d\xb7\x95\xcd\xc5\x2a\xb9\x4b\x82\xcb\x1c\xae\x09\x0b\xfe\x22\xfe\x0d\x28\xa5\xfc\x03\x88\xbf\xb8\xdc\x04\xb4\x74\x7a\x23\xae\x96\x80\x8d\xc8\x40\x38\xc8\x11\x65\x4e\x54\xf0\x24\x0c\xa1\x88\x6e\xc6\x79\xe1\x58\x0a\xc5\x1b\x7c\xfc\x59\xe7\xf0\x94\xbf\x35\x81\x56\x72\x8e\x8f\x5b\xac\x34\x06\x94\xdb\x5a\x90\x8f\x08\x7d\x72\x3e\x91\x62\x03\x37\x29\xe5\x3a\x3d\x5c\x54\x8b\x1a\x25\x8a\x56\xcb\x12\xb4\xc0\x7c\xe2\x17\x62\xb9\x68\x37\xbc\x4e\x9c\x72\x54\x28\x30\x41\x22\x4b\xc1\xd1\xb2\x1d\x37\xeb\xee\x49\x7e\x16\x1d\x65\x5d\x50\xaa\xba\x2d\x38\x7e\x0e\x4f\x44\x16\xe7\x6e\x88\xea\x64\x58\x82\x99\xa3\x44\x18\xeb\xde\x23\x97\x81\x42\xd7\xba\x28\xc0\x84\x13\xbb\xb0\xd7\xba\x3b\xd8\x90\x5d\xcb\x8c\x28\x1c\xb2\x86\xad\x65\x96\x69\x0e\xe1\xe4\xc1\xef\x58\xcb\x6b\xf3\x1a\x74\xc3\x9d\xb0\x13\x5a\x29\xf2\x5a\x52\x27\xcf\x2a\xea\xc5\xa0\xab\x77\x3e\x5d\xb8\x2f\xd3\xea\xc7\x97\x8b\xee\xed\xe9\xd5\xaf\xfc\x72\xff\xe2\x64\x7a\x63\x88\x39\x3d\x24\xc3\x22\xdd\xa3\xfd\x9f\xe7\x83\xc7\xb3\x4f\x97\xdf\xaf\xfa\xe4\xbc\x38\x3f\x3b\x3b\xec\x66\xf7\xc5\x79\xef\x62\x7a\xf5\xb2\xa2\x46\xa4\xc1\xfa\x6f\xc0\xb9\x9a\xd8\x90\x49\x5d\xf2\x44\x52\x03\x35\x7a\x3a\xa1\x33\x22\xc5\xd8\x92\x62\x99\x11\xd2\x09\x3b\x3b\xe1\x21\x29\x73\xbe\x74\xbe\xcc\xa8\x5f\x5c\x8d\xd3\xec\xf0\xe3\xf6\x8f\xce\xf0\xc2\x55\xdd\x1b\xb5\x7f\xd7\xcd\xd3\xeb\x59\x76\x7b\x78\x41\x46\x6c\x68\xfb\xd7\xfb\xd9\xad\x18\xdf\x77\x0f\x27\xfb\x09\x9d\x9e\x5d\xdb\x69\x75\x5f\xda\x2a\xa1\xed\xf1\xee\xf0\x3f\x31\xfa\xdb\x89\x37\xf9\x73\xe0\x3d\xcf\x65\xf0\xf3\x66\x6f\x54\xc0\x24\xdb\xbd\x6d\xef\xf0\x83\xc9\x57\xb7\x57\xfd\xef\xf4\x73\x02\x64\x30\x3c\x17\x37\x37\xa3\xe1\x70\x36\x4a\xce\xee\x0a\xd1\xb9\x7c\x28\xbf\xf3\xfe\x7c\x72\x4b\x4d\x6f\x7b\x7f\xef\xfa\xfb\x49\xfe\x43\xfe\x35\x17\x5f\x93\x5f\x0b\x5f\xa4\x54\xa2\x01\xad\xe8\xa8\x21\xf7\x47\xdd\x35\xc6\xdb\x56\x52\xaa\xba\xa2\x5b\xeb\xe9\x61\x35\x9b\x82\x43\x31\x52\xf0\x88\xee\x60\x3c\xaa\xed\x16\x7e\xf4\x69\x91\x9a\x51\x99\x69\xeb\x8e\x7a\xbd\x5e\x87\xf8\xc6\xc1\x5b\x1f\x9e\x7c\x19\x6a\x95\x83\xb5\x34\x05\x14\xa3\xe5\xfe\xa8\x05\x95\x17\x80\x8d\x19\xf5\xb6\xf5\xae\x1e\x65\xef\xb6\xc2\xc2\x40\x01\x8a\xb7\x70\x24\xc5\x31\xde\xae\x43\x43\xaf\xea\xdb\xb8\xd6\x86\xf5\x11\xcd\xf0\xfa\xbd\xb0\x37\xb9\x47\xa4\x99\x51\x11\xa9\xff\xa6\xfd\x13\x00\x00\xff\xff\xa6\x1c\x6f\xf6\xb6\x09\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 2486, mode: os.FileMode(420), modTime: time.Unix(1517590479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
